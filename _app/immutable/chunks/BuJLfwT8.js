import"./NZTpNUN0.js";import"./69_IOA4Y.js";import{f as Fa,s,A as Ca,a as Aa,c as a,r as n,n as o}from"./BSyUpBt6.js";import{c as p}from"./C1qLbRIA.js";import{I as l}from"./C050mrvx.js";var Ba=Fa(`<h1>Rust OOP: Unlock Polymorphism in Rust</h1> <p><em>2772 words</em><span class="status mx-1"></span><em>35 min read</em></p> <span class="badge badge-primary">markdown</span> <h2 id="i-mở-đầu" class="scroll-mt-20">I. Mở đầu</h2><p>Chao xìn, xin chào, rất vui vì bạn đã dành thời gian để xem những chia sẻ của mình trong lĩnh vực lập trình. Và dành cho những ai đã khởi đầu con đường lập trình thông qua những video Java của mấy anh ở đất nước có dân số đứng thứ 2 thế giới, ta có thể nói rằng, OOP chính là bài học vỡ lòng mà bất kỳ ai cũng <del>phải</del> đã thuộc làu làu như 5 điều bác hồ dạy. Chính vì lý do này, khi chuyển sang 1 ngôn ngữ không tuân theo các nguyên tắc của Java, việc áp đặt mindset cũ và đặt ra những so sánh là điều khó tránh khỏi.</p> <p>Trong bài viết này, mình sẽ thử áp dụng mindset khi code Java lên Rust để xem rằng chúng có những ưu/nhược điểm gì và tại sao Rust lại khác biệt so với các ngôn ngữ khác về mặt này. Để bài viết này dễ theo dõi, mình sẽ tập trung vào nguyên lý nổi tiếng và mạnh mẽ nhất của Java, tính <u>đa hình</u> (polymorphism). Cùng nhau tìm hiểu nhé, let&#39;s gooooooo.</p> <h2 id="ii-tính-đa-hình-polymorphism" class="scroll-mt-20">II. Tính đa hình (Polymorphism)</h2><p>Nguyên lý này <strong>cho phép bạn tạo ra nhiều kết quả khác nhau từ 1 nguồn</strong>. Trong Java ta có thể đạt được điều này thông qua việc override method từ 1 interface, class hoặc abstract class.</p> <figure class="highlighted-code relative"><label class="swap absolute top-2 right-2" data-code="interface LLM {
    void bipbop();
}
class ChatGPT implements LLM { ... } // override \`bipbop\`
class Gemini implements LLM { ... } // override \`bipbop\`
class Claude implements LLM { ... } // override \`bipbop\`" data-lang="JAVA"><input type="checkbox"/> <!> <!></label> <pre class="shiki github-dark-dimmed line-clamp-20 overflow-auto" style="background-color:#22272e;color:#adbac7" tabindex="0"><code><span class="line"><span style="color:#F47067">interface</span><span style="color:#F69D50"> LLM</span><span style="color:#ADBAC7"> &lbrace;</span></span>
<span class="line"><span style="color:#F47067">    void</span><span style="color:#DCBDFB"> bipbop</span><span style="color:#ADBAC7">();</span></span>
<span class="line"><span style="color:#ADBAC7">&rbrace;</span></span>
<span class="line"><span style="color:#F47067">class</span><span style="color:#F69D50"> ChatGPT</span><span style="color:#F47067"> implements</span><span style="color:#6CB6FF"> LLM</span><span style="color:#ADBAC7"> &lbrace; ... &rbrace; </span><span style="color:#768390">// override \`bipbop\`</span></span>
<span class="line"><span style="color:#F47067">class</span><span style="color:#F69D50"> Gemini</span><span style="color:#F47067"> implements</span><span style="color:#6CB6FF"> LLM</span><span style="color:#ADBAC7"> &lbrace; ... &rbrace; </span><span style="color:#768390">// override \`bipbop\`</span></span>
<span class="line"><span style="color:#F47067">class</span><span style="color:#F69D50"> Claude</span><span style="color:#F47067"> implements</span><span style="color:#6CB6FF"> LLM</span><span style="color:#ADBAC7"> &lbrace; ... &rbrace; </span><span style="color:#768390">// override \`bipbop\`</span></span></code></pre></figure> <p>Để đạt được tính năng này, ngôn ngữ lâp trình sử dụng cơ chế vtable, bạn có thể hiểu rằng vtable được xây dựng giống như 1 Dictionary (danh sách các key-value) với <em>key</em> là id của class và <em>value</em> là con trỏ trỏ tới vị trí mà class được khởi tạo (sau khi gọi từ khóa <em>new</em>).</p> <p>&lbrace;&lbrace;Vẽ hình minh họa&rbrace;&rbrace;</p> <p>Đây là kiến trúc phổ biến và mang lại hiệu quả cao nên được áp dụng trong mọi ngôn ngữ lập trình có sử dụng tính đa hình (polymorphism). Tuy nhiên, nếu quan sát kỹ ta vẫn có thể thấy rằng khi sử dụng vtable sẽ tốn thêm chi phí để tìm ra được con trỏ tới địa chỉ cần tìm, trong 1 vài tình huống khi ta đã xác định rõ class muốn gọi thì đây là 1 sự dư thừa không cần thiết. Đội ngũ thiết kế Rust đã nhìn ra và tối ưu hóa cho trường hợp này, mình sẽ nói rõ hơn ở phần tiếp theo.</p> <h2 id="iii-dynamic-dispatch" class="scroll-mt-20">III. Dynamic Dispatch</h2><p>Hoãn lại 1 chút sự phấn khích trước khi chúng ta tìm hiểu xem Rust đã tối ưu hóa như thế nào, hãy bắt đầu từ vấn đề trước. Như đã đề cập ở trên, dynamic polymorphism xử dụng cơ chế vtable để quản lý các implementation và cho phép đoạn code sau đây xảy ra.</p> <figure class="highlighted-code relative"><label class="swap absolute top-2 right-2" data-code="List&lt;LLM> llms = Arrays.asList(new ChatGPT(), new Gemini(), new Claude());

llms.forEach(llm -> llm.bipbop());" data-lang="JAVA"><input type="checkbox"/> <!> <!></label> <pre class="shiki github-dark-dimmed line-clamp-20 overflow-auto" style="background-color:#22272e;color:#adbac7" tabindex="0"><code><span class="line"><span style="color:#ADBAC7">List</span><span style="color:#F69D50">&#x3C;</span><span style="color:#F47067">LLM</span><span style="color:#F69D50">> </span><span style="color:#ADBAC7">llms</span><span style="color:#F47067"> =</span><span style="color:#ADBAC7"> Arrays.</span><span style="color:#DCBDFB">asList</span><span style="color:#ADBAC7">(</span><span style="color:#F47067">new</span><span style="color:#DCBDFB"> ChatGPT</span><span style="color:#ADBAC7">(), </span><span style="color:#F47067">new</span><span style="color:#DCBDFB"> Gemini</span><span style="color:#ADBAC7">(), </span><span style="color:#F47067">new</span><span style="color:#DCBDFB"> Claude</span><span style="color:#ADBAC7">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7">llms.</span><span style="color:#DCBDFB">forEach</span><span style="color:#ADBAC7">(llm </span><span style="color:#F47067">-></span><span style="color:#ADBAC7"> llm.</span><span style="color:#DCBDFB">bipbop</span><span style="color:#ADBAC7">());</span></span></code></pre></figure> <p>Tuy nhiên khi mình cố áp dụng vào trong Rust, kết quả là</p> <figure class="highlighted-code relative"><label class="swap absolute top-2 right-2" data-code="trait LLM {
	bipbop();
}
#[derive(Default)]
struct ChatGPT;
#[derive(Default)]
struct Gemini;
#[derive(Default)]
struct Claude;

impl LLM for ChatGPT {}
impl LLM for ChatGPT {}
impl LLM for ChatGPT {}

let llms: Vec&lt;LLM> = Vec::from([ChatGPT::default(), Gemini::default(), Claude::default()]);" data-lang="RUST"><input type="checkbox"/> <!> <!></label> <pre class="shiki github-dark-dimmed line-clamp-20 overflow-auto" style="background-color:#22272e;color:#adbac7" tabindex="0"><code><span class="line"><span style="color:#F47067">trait</span><span style="color:#F69D50"> LLM</span><span style="color:#ADBAC7"> &lbrace;</span></span>
<span class="line"><span style="color:#DCBDFB">	bipbop</span><span style="color:#ADBAC7">();</span></span>
<span class="line"><span style="color:#ADBAC7">&rbrace;</span></span>
<span class="line"><span style="color:#ADBAC7">#[derive(</span><span style="color:#F69D50">Default</span><span style="color:#ADBAC7">)]</span></span>
<span class="line"><span style="color:#F47067">struct</span><span style="color:#F69D50"> ChatGPT</span><span style="color:#ADBAC7">;</span></span>
<span class="line"><span style="color:#ADBAC7">#[derive(</span><span style="color:#F69D50">Default</span><span style="color:#ADBAC7">)]</span></span>
<span class="line"><span style="color:#F47067">struct</span><span style="color:#F69D50"> Gemini</span><span style="color:#ADBAC7">;</span></span>
<span class="line"><span style="color:#ADBAC7">#[derive(</span><span style="color:#F69D50">Default</span><span style="color:#ADBAC7">)]</span></span>
<span class="line"><span style="color:#F47067">struct</span><span style="color:#F69D50"> Claude</span><span style="color:#ADBAC7">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067">impl</span><span style="color:#6CB6FF"> LLM</span><span style="color:#F47067"> for</span><span style="color:#F69D50"> ChatGPT</span><span style="color:#ADBAC7"> &lbrace;&rbrace;</span></span>
<span class="line"><span style="color:#F47067">impl</span><span style="color:#6CB6FF"> LLM</span><span style="color:#F47067"> for</span><span style="color:#F69D50"> ChatGPT</span><span style="color:#ADBAC7"> &lbrace;&rbrace;</span></span>
<span class="line"><span style="color:#F47067">impl</span><span style="color:#6CB6FF"> LLM</span><span style="color:#F47067"> for</span><span style="color:#F69D50"> ChatGPT</span><span style="color:#ADBAC7"> &lbrace;&rbrace;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067">let</span><span style="color:#ADBAC7"> llms</span><span style="color:#F47067">:</span><span style="color:#F69D50"> Vec</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#F69D50">LLM</span><span style="color:#ADBAC7">> </span><span style="color:#F47067">=</span><span style="color:#F69D50"> Vec</span><span style="color:#F47067">::</span><span style="color:#DCBDFB">from</span><span style="color:#ADBAC7">([</span><span style="color:#F69D50">ChatGPT</span><span style="color:#F47067">::</span><span style="color:#DCBDFB">default</span><span style="color:#ADBAC7">(), </span><span style="color:#F69D50">Gemini</span><span style="color:#F47067">::</span><span style="color:#DCBDFB">default</span><span style="color:#ADBAC7">(), </span><span style="color:#F69D50">Claude</span><span style="color:#F47067">::</span><span style="color:#DCBDFB">default</span><span style="color:#ADBAC7">()]);</span></span></code></pre></figure> <figure class="highlighted-code relative"><label class="swap absolute top-2 right-2" data-code="" data-lang=""><input type="checkbox"/> <!> <!></label> <pre class="shiki github-dark-dimmed line-clamp-20 overflow-auto" style="background-color:#22272e;color:#adbac7" tabindex="0"><code><span class="line"><span></span></span></code></pre></figure> <p>Để giải thích lý do tại sao đoạn code trên không hoạt động, trước hết hãy chắc rằng bạn đã hiểu hết những khái niệm sau đây</p> <ul><li>Pointer &amp; FatPointer</li> <li>Heap vs Stack</li> <li>Object Allocation</li></ul> <p>Minh sẽ giải thích 1 chút về cách 1 Collection như Vec và List chứa dữ liệu, về bản chất chúng là những FatPointer có chứa 3 dữ liệu quan trọng</p> <ol><li>Pointer: con trỏ tới vùng nhớ của dữ liệu</li> <li>Size: độ lớn của dữ liệu</li> <li>Length: số lượng phần tử</li></ol> <p>Có 1 ràng buộc cực kỳ quan trong về thiết kế của Collection đó là các phần tử con phải có size là <strong>ngang nhau</strong>.  Quay lại 3 object mà chúng ta đã khởi tạo khi nãy, chúng có độ lớn khác nhau, bạn sẽ thắc mắc rằng</p> <blockquote>Nếu thế thì tôi chỉ cần tạo ra các object có các field giống nhau là được mà?</blockquote><p>Thì theo lý thuyết, cách làm của bạn là không sai nhưng compiler hiện nay không đủ thông minh để biết được chuyện này, và để cho an toàn thì cứ mỗi khi nhìn thấy 2 object có sự khác biệt về signature, compiler mặc định là có sự khác biệt về kích thước.</p> <blockquote>"Ủa vậy tại sao thằng Java nó lại làm được?"</blockquote><p>Yeah, ông Java đã giấu nhẹm đi 1 chuyện, nó đã ngầm định lưu trữ các con trỏ thay vì giá trị thực của từng object. Và như bạn biết đó, pointer có size là bằng nhau nên vẫn thỏa ràng buộc đã đặt ra.</p> <p>&lbrace;&lbrace;Vẽ hình minh họa&rbrace;&rbrace;</p> <h3 id="1-smart-pointer" class="scroll-mt-20">1. Smart Pointer</h3><p>Mình cũng đã đưa ra câu giải pháp để áp dụng tính đa hình vào Rust rồi đó, nếu như bạn đủ tinh ý. Vì Rust không ngầm định cast các object sang pointer nên ta buộc phải làm điều đó 1 cách thủ công. Công cụ mà mình sử dụng để làm điều đó là SmartPointer, nó cho phép chúng ta lưu trữ 1 object bất kỳ vào bộ nhớ HEAP, sau đó trả về con trỏ tới ô nhớ đó. Điểm mạnh là chúng ta không cần quan tâm về việc dọn dẹp sau khi xử dụng, vì sao cần phải dọn dẹp thì bạn có thể tìm hiểu ở đây &lbrace;&lbrace; garbade collection vs RAII &rbrace;&rbrace;</p> <p>Wahlla chúng ta đã đưa các object của Rust về dạng con trỏ và bây giờ chúng đã có chung kích thước. No more complains from compiler.</p> <figure class="highlighted-code relative"><label class="swap absolute top-2 right-2" data-code="let lllms: Vec&lt;Box&lt;dyn LLM>> = Vec::from([Box::new(ChatGPT::default()), ..]);" data-lang="RUST"><input type="checkbox"/> <!> <!></label> <pre class="shiki github-dark-dimmed line-clamp-20 overflow-auto" style="background-color:#22272e;color:#adbac7" tabindex="0"><code><span class="line"><span style="color:#F47067">let</span><span style="color:#ADBAC7"> lllms</span><span style="color:#F47067">:</span><span style="color:#F69D50"> Vec</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#F69D50">Box</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#F47067">dyn</span><span style="color:#F69D50"> LLM</span><span style="color:#ADBAC7">>> </span><span style="color:#F47067">=</span><span style="color:#F69D50"> Vec</span><span style="color:#F47067">::</span><span style="color:#DCBDFB">from</span><span style="color:#ADBAC7">([</span><span style="color:#F69D50">Box</span><span style="color:#F47067">::</span><span style="color:#DCBDFB">new</span><span style="color:#ADBAC7">(</span><span style="color:#F69D50">ChatGPT</span><span style="color:#F47067">::</span><span style="color:#DCBDFB">default</span><span style="color:#ADBAC7">()), </span><span style="color:#F47067">..</span><span style="color:#ADBAC7">]);</span></span></code></pre></figure> <h3 id="2-raw-pointer" class="scroll-mt-20">2. Raw Pointer</h3><p>Có 1 cách &quot;hoang dã&quot; hơn để làm việc này đó là bạn cast thẳng object về dạng raw pointer, điểm mạnh của cách làm này là không chỉ dài dòng mà còn giúp bạn có cơ hội để đánh sập server production như 1 hecker <del>lỏd</del> chuyên nghiệp.</p> <figure class="highlighted-code relative"><label class="swap absolute top-2 right-2" data-code="// WARNING
let lllms: Vec&lt;*const dyn LLM> = Vec::from([&amp;ChatGPT::default() as *const dyn LLM), ..]);" data-lang="RUST"><input type="checkbox"/> <!> <!></label> <pre class="shiki github-dark-dimmed line-clamp-20 overflow-auto" style="background-color:#22272e;color:#adbac7" tabindex="0"><code><span class="line"><span style="color:#768390">// WARNING</span></span>
<span class="line"><span style="color:#F47067">let</span><span style="color:#ADBAC7"> lllms</span><span style="color:#F47067">:</span><span style="color:#F69D50"> Vec</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#F47067">*const</span><span style="color:#F47067"> dyn</span><span style="color:#F69D50"> LLM</span><span style="color:#ADBAC7">> </span><span style="color:#F47067">=</span><span style="color:#F69D50"> Vec</span><span style="color:#F47067">::</span><span style="color:#DCBDFB">from</span><span style="color:#ADBAC7">([</span><span style="color:#F47067">&#x26;</span><span style="color:#F69D50">ChatGPT</span><span style="color:#F47067">::</span><span style="color:#DCBDFB">default</span><span style="color:#ADBAC7">() </span><span style="color:#F47067">as</span><span style="color:#F47067"> *const</span><span style="color:#F47067"> dyn</span><span style="color:#6CB6FF"> LLM</span><span style="color:#ADBAC7">), </span><span style="color:#F47067">..</span><span style="color:#ADBAC7">]);</span></span></code></pre></figure> <blockquote>Đừng thử nhá, mình đùa thôi.</blockquote> <h3 id="3-std-any-any" class="scroll-mt-20">3. std::any::Any</h3><p>1 cách làm ít phổ biến hơn để đạt được polymorphism trong Rust là thông qua <code>std::any::Any</code>, nếu ai đã từng học qua Typescript thì sẽ thấy cái này rất quen, vâng bạn không lầm đâu, đúng nó rồi đấy. Cách này sẽ bỏ qua mọi typecheck của compiler và cho phép bạn truyền vào bất cứ thứ gì bạn muốn, và như uncle Ben đã nói</p> <blockquote>Sức mạnh to lớn luôn đi kèm với trách nhiệm to lớn</blockquote><p>Tin mình đi, bạn không đủ sức để gánh vác trách nhiệm này đâu, đó là lý do mà mỗi vũ trụ chỉ có 1 anh nhện và đó không phải bạn.</p> <figure class="highlighted-code relative"><label class="swap absolute top-2 right-2" data-code="let lllms: Vec&lt;Box&lt;dyn Any>> = Vec::from([Box::new(ChatGPT::default()), ..]);

for llm in llms {
	if let Some(gpt) = llm.downcast_ref::&lt;ChatGPT>() {
		gpt.bipbop();
	}
	...
}" data-lang="RUST"><input type="checkbox"/> <!> <!></label> <pre class="shiki github-dark-dimmed line-clamp-20 overflow-auto" style="background-color:#22272e;color:#adbac7" tabindex="0"><code><span class="line"><span style="color:#F47067">let</span><span style="color:#ADBAC7"> lllms</span><span style="color:#F47067">:</span><span style="color:#F69D50"> Vec</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#F69D50">Box</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#F47067">dyn</span><span style="color:#F69D50"> Any</span><span style="color:#ADBAC7">>> </span><span style="color:#F47067">=</span><span style="color:#F69D50"> Vec</span><span style="color:#F47067">::</span><span style="color:#DCBDFB">from</span><span style="color:#ADBAC7">([</span><span style="color:#F69D50">Box</span><span style="color:#F47067">::</span><span style="color:#DCBDFB">new</span><span style="color:#ADBAC7">(</span><span style="color:#F69D50">ChatGPT</span><span style="color:#F47067">::</span><span style="color:#DCBDFB">default</span><span style="color:#ADBAC7">()), </span><span style="color:#F47067">..</span><span style="color:#ADBAC7">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067">for</span><span style="color:#ADBAC7"> llm </span><span style="color:#F47067">in</span><span style="color:#ADBAC7"> llms &lbrace;</span></span>
<span class="line"><span style="color:#F47067">	if</span><span style="color:#F47067"> let</span><span style="color:#F69D50"> Some</span><span style="color:#ADBAC7">(gpt) </span><span style="color:#F47067">=</span><span style="color:#ADBAC7"> llm</span><span style="color:#F47067">.</span><span style="color:#DCBDFB">downcast_ref</span><span style="color:#F47067">::</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#F69D50">ChatGPT</span><span style="color:#ADBAC7">>() &lbrace;</span></span>
<span class="line"><span style="color:#ADBAC7">		gpt</span><span style="color:#F47067">.</span><span style="color:#DCBDFB">bipbop</span><span style="color:#ADBAC7">();</span></span>
<span class="line"><span style="color:#ADBAC7">	&rbrace;</span></span>
<span class="line"><span style="color:#F47067">	...</span></span>
<span class="line"><span style="color:#ADBAC7">&rbrace;</span></span></code></pre></figure> <h2 id="iv-static-dispatch" class="scroll-mt-20">IV. Static Dispatch</h2><p>Phew, cuối cùng cũng đến, ủa mà nãy giờ hình như cũng đâu thấy có gì tệ về dynamic Polymorphism đâu nhỉ? Okay thế thì mời bạn nhìn qua vi dụ này.</p> <figure class="highlighted-code relative"><label class="swap absolute top-2 right-2" data-code="LLM gpt = new ChatGPT();
LLM gemini = new Gemini();
LLM claude = new Claude();" data-lang="JAVA"><input type="checkbox"/> <!> <!></label> <pre class="shiki github-dark-dimmed line-clamp-20 overflow-auto" style="background-color:#22272e;color:#adbac7" tabindex="0"><code><span class="line"><span style="color:#ADBAC7">LLM</span><span style="color:#ADBAC7"> gpt</span><span style="color:#F47067"> =</span><span style="color:#F47067"> new</span><span style="color:#DCBDFB"> ChatGPT</span><span style="color:#ADBAC7">();</span></span>
<span class="line"><span style="color:#ADBAC7">LLM</span><span style="color:#ADBAC7"> gemini</span><span style="color:#F47067"> =</span><span style="color:#F47067"> new</span><span style="color:#DCBDFB"> Gemini</span><span style="color:#ADBAC7">();</span></span>
<span class="line"><span style="color:#ADBAC7">LLM</span><span style="color:#ADBAC7"> claude</span><span style="color:#F47067"> =</span><span style="color:#F47067"> new</span><span style="color:#DCBDFB"> Claude</span><span style="color:#ADBAC7">();</span></span></code></pre></figure> <p>Vậy thì với cách khởi tao trên 3 variables <code>gpt</code>, <code>gemini</code> và <code>claude</code> sẽ trả về con trỏ tới trực tiếp ô chứa của chúng nhỉ? Nhỉ? Hell nah, chúng vẫn phải đi qua vtable để tìm đia chỉ nhà của mình rồi sau đó mới có thể thực thi các hàm bên trong.</p> <blockquote>"Ơ thế sao ông không khai báo như này?"</blockquote> <figure class="highlighted-code relative"><label class="swap absolute top-2 right-2" data-code="ChatGPT gpt = new ChatGPT();
Gemini gemini = new Gemini();
Claude claude = new Claude();" data-lang="JAVA"><input type="checkbox"/> <!> <!></label> <pre class="shiki github-dark-dimmed line-clamp-20 overflow-auto" style="background-color:#22272e;color:#adbac7" tabindex="0"><code><span class="line"><span style="color:#ADBAC7">ChatGPT</span><span style="color:#ADBAC7"> gpt</span><span style="color:#F47067"> =</span><span style="color:#F47067"> new</span><span style="color:#DCBDFB"> ChatGPT</span><span style="color:#ADBAC7">();</span></span>
<span class="line"><span style="color:#ADBAC7">Gemini</span><span style="color:#ADBAC7"> gemini</span><span style="color:#F47067"> =</span><span style="color:#F47067"> new</span><span style="color:#DCBDFB"> Gemini</span><span style="color:#ADBAC7">();</span></span>
<span class="line"><span style="color:#ADBAC7">Claude</span><span style="color:#ADBAC7"> claude</span><span style="color:#F47067"> =</span><span style="color:#F47067"> new</span><span style="color:#DCBDFB"> Claude</span><span style="color:#ADBAC7">();</span></span></code></pre></figure> <p>Okay cách này thì tối ưu rồi đó, thế thì trường hợp mình muốn tạo hàm xử lý cho các LLM này thì sao?</p> <figure class="highlighted-code relative"><label class="swap absolute top-2 right-2" data-code="/// normal people
void sendMessgeTo(LLM llm) {}

/// who does this?
/// void sendMessgeChatGPT(ChatGPT llm) {}
/// void sendMessgeGemini(Gemini llm) {}
/// void sendMessgeClause(Clause llm) {}" data-lang="JAVA"><input type="checkbox"/> <!> <!></label> <pre class="shiki github-dark-dimmed line-clamp-20 overflow-auto" style="background-color:#22272e;color:#adbac7" tabindex="0"><code><span class="line"><span style="color:#768390">/// normal people</span></span>
<span class="line"><span style="color:#F47067">void</span><span style="color:#DCBDFB"> sendMessgeTo</span><span style="color:#ADBAC7">(LLM llm) &lbrace;&rbrace;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390">/// who does this?</span></span>
<span class="line"><span style="color:#768390">/// void sendMessgeChatGPT(ChatGPT llm) &lbrace;&rbrace;</span></span>
<span class="line"><span style="color:#768390">/// void sendMessgeGemini(Gemini llm) &lbrace;&rbrace;</span></span>
<span class="line"><span style="color:#768390">/// void sendMessgeClause(Clause llm) &lbrace;&rbrace;</span></span></code></pre></figure> <p>Không thể nào mà mình phải đi tạo hàm cho từng kiểu dữ liệu được đúng ko, và rồi chúng ta lại cũng phải gặp lại anh vtable quen thuộc. Rust đưa cho chúng ta 2 giải pháp.</p> <h3 id="1-keyword-impl" class="scroll-mt-20">1.  Keyword \`impl\`</h3><p>&quot;đá trái banh&quot; và &quot;nước đá&quot;, cùng 1 từ &quot;đá&quot; nhưng tùy vào vị trí chúng sẽ cho ra ý nghĩa khác nhau. Keyword <code>impl</code> ngoài việc dùng để khai báo cho struct còn dùng để suy luận kiểu dữ liệu.</p> <p>Function/Method Params:</p> <figure class="highlighted-code relative"><label class="swap absolute top-2 right-2" data-code="fn send_message_to(llm: impl LLM) {}

send_message_to(ChatGPT::default());
send_message_to(Gemini::default());
send_message_to(Claude::default());" data-lang="RUST"><input type="checkbox"/> <!> <!></label> <pre class="shiki github-dark-dimmed line-clamp-20 overflow-auto" style="background-color:#22272e;color:#adbac7" tabindex="0"><code><span class="line"><span style="color:#F47067">fn</span><span style="color:#DCBDFB"> send_message_to</span><span style="color:#ADBAC7">(llm</span><span style="color:#F47067">:</span><span style="color:#F47067"> impl</span><span style="color:#6CB6FF"> LLM</span><span style="color:#ADBAC7">) &lbrace;&rbrace;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCBDFB">send_message_to</span><span style="color:#ADBAC7">(</span><span style="color:#F69D50">ChatGPT</span><span style="color:#F47067">::</span><span style="color:#DCBDFB">default</span><span style="color:#ADBAC7">());</span></span>
<span class="line"><span style="color:#DCBDFB">send_message_to</span><span style="color:#ADBAC7">(</span><span style="color:#F69D50">Gemini</span><span style="color:#F47067">::</span><span style="color:#DCBDFB">default</span><span style="color:#ADBAC7">());</span></span>
<span class="line"><span style="color:#DCBDFB">send_message_to</span><span style="color:#ADBAC7">(</span><span style="color:#F69D50">Claude</span><span style="color:#F47067">::</span><span style="color:#DCBDFB">default</span><span style="color:#ADBAC7">());</span></span></code></pre></figure> <p>Return Type:</p> <figure class="highlighted-code relative"><label class="swap absolute top-2 right-2" data-code="fn get_chatgpt(type: u64) -> impl LLM { ChatGPT::default() }
fn get_gemini(type: u64) -> impl LLM { Gemini::default() }
fn get_claude(type: u64) -> impl LLM { Claude::default() }" data-lang="RUST"><input type="checkbox"/> <!> <!></label> <pre class="shiki github-dark-dimmed line-clamp-20 overflow-auto" style="background-color:#22272e;color:#adbac7" tabindex="0"><code><span class="line"><span style="color:#F47067">fn</span><span style="color:#DCBDFB"> get_chatgpt</span><span style="color:#ADBAC7">(</span><span style="color:#F47067">type:</span><span style="color:#F69D50"> u64</span><span style="color:#ADBAC7">) </span><span style="color:#F47067">-></span><span style="color:#F47067"> impl</span><span style="color:#6CB6FF"> LLM</span><span style="color:#ADBAC7"> &lbrace; </span><span style="color:#F69D50">ChatGPT</span><span style="color:#F47067">::</span><span style="color:#DCBDFB">default</span><span style="color:#ADBAC7">() &rbrace;</span></span>
<span class="line"><span style="color:#F47067">fn</span><span style="color:#DCBDFB"> get_gemini</span><span style="color:#ADBAC7">(</span><span style="color:#F47067">type:</span><span style="color:#F69D50"> u64</span><span style="color:#ADBAC7">) </span><span style="color:#F47067">-></span><span style="color:#F47067"> impl</span><span style="color:#6CB6FF"> LLM</span><span style="color:#ADBAC7"> &lbrace; </span><span style="color:#F69D50">Gemini</span><span style="color:#F47067">::</span><span style="color:#DCBDFB">default</span><span style="color:#ADBAC7">() &rbrace;</span></span>
<span class="line"><span style="color:#F47067">fn</span><span style="color:#DCBDFB"> get_claude</span><span style="color:#ADBAC7">(</span><span style="color:#F47067">type:</span><span style="color:#F69D50"> u64</span><span style="color:#ADBAC7">) </span><span style="color:#F47067">-></span><span style="color:#F47067"> impl</span><span style="color:#6CB6FF"> LLM</span><span style="color:#ADBAC7"> &lbrace; </span><span style="color:#F69D50">Claude</span><span style="color:#F47067">::</span><span style="color:#DCBDFB">default</span><span style="color:#ADBAC7">() &rbrace;</span></span></code></pre></figure> <p>Generic Associated Type:</p> <figure class="highlighted-code relative"><label class="swap absolute top-2 right-2" data-code="" data-lang="RUST"><input type="checkbox"/> <!> <!></label> <pre class="shiki github-dark-dimmed line-clamp-20 overflow-auto" style="background-color:#22272e;color:#adbac7" tabindex="0"><code><span class="line"></span></code></pre></figure> <blockquote>Sao chỗ "Return Type" ông không tạo 1 hàm chung rồi trả về theo điều kiện input mà lại phải tách ra làm 3 hàm như vây?</blockquote><p>Đây là 1 hạn chế lớn của static-dispatch, gỉa sử mình làm như vậy.</p> <figure class="highlighted-code relative"><label class="swap absolute top-2 right-2" data-code="fn get_llm(type: u64) -> impl LLM { /// should type compiler infer?
	if type == 1 { ChatGPT::default() }
	if type == 2 { Gemini::default() }
	if type == 3 { Claude::default() }
	ChatGPT::default()
}" data-lang="RUST"><input type="checkbox"/> <!> <!></label> <pre class="shiki github-dark-dimmed line-clamp-20 overflow-auto" style="background-color:#22272e;color:#adbac7" tabindex="0"><code><span class="line"><span style="color:#F47067">fn</span><span style="color:#DCBDFB"> get_llm</span><span style="color:#ADBAC7">(</span><span style="color:#F47067">type:</span><span style="color:#F69D50"> u64</span><span style="color:#ADBAC7">) </span><span style="color:#F47067">-></span><span style="color:#F47067"> impl</span><span style="color:#6CB6FF"> LLM</span><span style="color:#ADBAC7"> &lbrace; </span><span style="color:#768390">/// should type compiler infer?</span></span>
<span class="line"><span style="color:#F47067">	if</span><span style="color:#F47067"> type</span><span style="color:#F47067"> ==</span><span style="color:#6CB6FF"> 1</span><span style="color:#ADBAC7"> &lbrace; </span><span style="color:#F69D50">ChatGPT</span><span style="color:#F47067">::</span><span style="color:#DCBDFB">default</span><span style="color:#ADBAC7">() &rbrace;</span></span>
<span class="line"><span style="color:#F47067">	if</span><span style="color:#F47067"> type</span><span style="color:#F47067"> ==</span><span style="color:#6CB6FF"> 2</span><span style="color:#ADBAC7"> &lbrace; </span><span style="color:#F69D50">Gemini</span><span style="color:#F47067">::</span><span style="color:#DCBDFB">default</span><span style="color:#ADBAC7">() &rbrace;</span></span>
<span class="line"><span style="color:#F47067">	if</span><span style="color:#F47067"> type</span><span style="color:#F47067"> ==</span><span style="color:#6CB6FF"> 3</span><span style="color:#ADBAC7"> &lbrace; </span><span style="color:#F69D50">Claude</span><span style="color:#F47067">::</span><span style="color:#DCBDFB">default</span><span style="color:#ADBAC7">() &rbrace;</span></span>
<span class="line"><span style="color:#F69D50">	ChatGPT</span><span style="color:#F47067">::</span><span style="color:#DCBDFB">default</span><span style="color:#ADBAC7">()</span></span>
<span class="line"><span style="color:#ADBAC7">&rbrace;</span></span></code></pre></figure> <figure class="highlighted-code relative"><label class="swap absolute top-2 right-2" data-code="" data-lang=""><input type="checkbox"/> <!> <!></label> <pre class="shiki github-dark-dimmed line-clamp-20 overflow-auto" style="background-color:#22272e;color:#adbac7" tabindex="0"><code><span class="line"><span></span></span></code></pre></figure> <p>Đây là việc bất khả thi để compiler có thể suy luận được giá trị nào được dùng để trả về. Để giải thích thì ta hãy quay về ví dụ &quot;Funciton/Method Params&quot;, ở ví dụ này Rust Compiler sẽ giải quyết như sau</p> <figure class="highlighted-code relative"><label class="swap absolute top-2 right-2" data-code="fn $_1_send_message_to(llm: ChatGPT) {}
fn $_2_send_message_to(llm: Gemini) {}
fn $_3_send_message_to(llm: Claude) {}

$_1_send_message_to(ChatGPT::default());
$_2_send_message_to(Gemini::default());
$_3_send_message_to(Claude::default());" data-lang="RUST"><input type="checkbox"/> <!> <!></label> <pre class="shiki github-dark-dimmed line-clamp-20 overflow-auto" style="background-color:#22272e;color:#adbac7" tabindex="0"><code><span class="line"><span style="color:#F47067">fn</span><span style="color:#F47067"> $</span><span style="color:#DCBDFB">_1_send_message_to</span><span style="color:#ADBAC7">(llm</span><span style="color:#F47067">:</span><span style="color:#F69D50"> ChatGPT</span><span style="color:#ADBAC7">) &lbrace;&rbrace;</span></span>
<span class="line"><span style="color:#F47067">fn</span><span style="color:#F47067"> $</span><span style="color:#DCBDFB">_2_send_message_to</span><span style="color:#ADBAC7">(llm</span><span style="color:#F47067">:</span><span style="color:#F69D50"> Gemini</span><span style="color:#ADBAC7">) &lbrace;&rbrace;</span></span>
<span class="line"><span style="color:#F47067">fn</span><span style="color:#F47067"> $</span><span style="color:#DCBDFB">_3_send_message_to</span><span style="color:#ADBAC7">(llm</span><span style="color:#F47067">:</span><span style="color:#F69D50"> Claude</span><span style="color:#ADBAC7">) &lbrace;&rbrace;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067">$</span><span style="color:#DCBDFB">_1_send_message_to</span><span style="color:#ADBAC7">(</span><span style="color:#F69D50">ChatGPT</span><span style="color:#F47067">::</span><span style="color:#DCBDFB">default</span><span style="color:#ADBAC7">());</span></span>
<span class="line"><span style="color:#F47067">$</span><span style="color:#DCBDFB">_2_send_message_to</span><span style="color:#ADBAC7">(</span><span style="color:#F69D50">Gemini</span><span style="color:#F47067">::</span><span style="color:#DCBDFB">default</span><span style="color:#ADBAC7">());</span></span>
<span class="line"><span style="color:#F47067">$</span><span style="color:#DCBDFB">_3_send_message_to</span><span style="color:#ADBAC7">(</span><span style="color:#F69D50">Claude</span><span style="color:#F47067">::</span><span style="color:#DCBDFB">default</span><span style="color:#ADBAC7">());</span></span></code></pre></figure> <p>Bằng cách phân tích cú pháp và generate ra 3 function ở từng nơi mà bạn gọi tương ứng với kiểu dữ liệu truyền vào, vẫn giữ nguyên method body, ta đã có thể giải quyết được bài toán polymorphism mà không cần đến vtable. Điều này hoàn toàn đươc thực hiện bởi Rust trong giai đoạn compiletime.</p> <p>Nhưng đối với ví dụ về &quot;Return Type&quot;, hoàn toàn không có cách nào để dự đoán được kiểu trả về trong giai đoạn compiletime vì như bạn thấy <code>type</code> là 1 params được xác định ở giai đoạn runtime.</p> <figure class="highlighted-code relative"><label class="swap absolute top-2 right-2" data-code="fn get_llm(type: u64) -> ??? {
	/// \`type\` = ???
	/// compiler can't choose between one in three return's values you provided
}" data-lang="RUST"><input type="checkbox"/> <!> <!></label> <pre class="shiki github-dark-dimmed line-clamp-20 overflow-auto" style="background-color:#22272e;color:#adbac7" tabindex="0"><code><span class="line"><span style="color:#F47067">fn</span><span style="color:#DCBDFB"> get_llm</span><span style="color:#ADBAC7">(</span><span style="color:#F47067">type:</span><span style="color:#F69D50"> u64</span><span style="color:#ADBAC7">) </span><span style="color:#F47067">-></span><span style="color:#F47067"> ???</span><span style="color:#ADBAC7"> &lbrace;</span></span>
<span class="line"><span style="color:#768390">	/// \`type\` = ???</span></span>
<span class="line"><span style="color:#768390">	/// compiler can't choose between one in three return's values you provided</span></span>
<span class="line"><span style="color:#ADBAC7">&rbrace;</span></span></code></pre></figure> <p>Notes:</p> <ul><li><code>impl Trait</code> luôn luôn được compiler thay thế bằng Type thực sau quá trình compile</li></ul> <h3 id="2-enum" class="scroll-mt-20">2. Enum</h3><p>1 trong những tính năng nổi bật bậc nhất trong ngôn ngữ Rust, không như những ngôn ngữ khác, Rust enum cực kỳ mạnh mẽ và linh hoạt, ta có thể sử dụng nó như 1 bộ khung cho dữ liệu có nhiều state khác nhau, enum với cơ chế typesafe sẽ đảm bảo bạn không mắc phải sai lầm thông qua typecheck ở giai đoạn compiletime.</p> <figure class="highlighted-code relative"><label class="swap absolute top-2 right-2" data-code="enum LLM {
	ChatGPT,
	Gemini,
	Claude,
}

let llms: Vec&lt;LLM> = Vec::from([LLM::ChatGPT, LLM::Gemini, LLM::Clause]);

fn send_message_to(llm: LLM) {}

send_message_to(LLM::ChatGPT);
send_message_to(LLM::Gemini);
send_message_to(LLM::Claude);" data-lang="RUST"><input type="checkbox"/> <!> <!></label> <pre class="shiki github-dark-dimmed line-clamp-20 overflow-auto" style="background-color:#22272e;color:#adbac7" tabindex="0"><code><span class="line"><span style="color:#F47067">enum</span><span style="color:#F69D50"> LLM</span><span style="color:#ADBAC7"> &lbrace;</span></span>
<span class="line"><span style="color:#F69D50">	ChatGPT</span><span style="color:#ADBAC7">,</span></span>
<span class="line"><span style="color:#F69D50">	Gemini</span><span style="color:#ADBAC7">,</span></span>
<span class="line"><span style="color:#F69D50">	Claude</span><span style="color:#ADBAC7">,</span></span>
<span class="line"><span style="color:#ADBAC7">&rbrace;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067">let</span><span style="color:#ADBAC7"> llms</span><span style="color:#F47067">:</span><span style="color:#F69D50"> Vec</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#F69D50">LLM</span><span style="color:#ADBAC7">> </span><span style="color:#F47067">=</span><span style="color:#F69D50"> Vec</span><span style="color:#F47067">::</span><span style="color:#DCBDFB">from</span><span style="color:#ADBAC7">([</span><span style="color:#6CB6FF">LLM</span><span style="color:#F47067">::</span><span style="color:#F69D50">ChatGPT</span><span style="color:#ADBAC7">, </span><span style="color:#6CB6FF">LLM</span><span style="color:#F47067">::</span><span style="color:#F69D50">Gemini</span><span style="color:#ADBAC7">, </span><span style="color:#6CB6FF">LLM</span><span style="color:#F47067">::</span><span style="color:#F69D50">Clause</span><span style="color:#ADBAC7">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067">fn</span><span style="color:#DCBDFB"> send_message_to</span><span style="color:#ADBAC7">(llm</span><span style="color:#F47067">:</span><span style="color:#6CB6FF"> LLM</span><span style="color:#ADBAC7">) &lbrace;&rbrace;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCBDFB">send_message_to</span><span style="color:#ADBAC7">(</span><span style="color:#6CB6FF">LLM</span><span style="color:#F47067">::</span><span style="color:#F69D50">ChatGPT</span><span style="color:#ADBAC7">);</span></span>
<span class="line"><span style="color:#DCBDFB">send_message_to</span><span style="color:#ADBAC7">(</span><span style="color:#6CB6FF">LLM</span><span style="color:#F47067">::</span><span style="color:#F69D50">Gemini</span><span style="color:#ADBAC7">);</span></span>
<span class="line"><span style="color:#DCBDFB">send_message_to</span><span style="color:#ADBAC7">(</span><span style="color:#6CB6FF">LLM</span><span style="color:#F47067">::</span><span style="color:#F69D50">Claude</span><span style="color:#ADBAC7">);</span></span></code></pre></figure> <p>Và nếu bạn dùng enum như Return Type thì ví dụ sau đây là khả thi</p> <figure class="highlighted-code relative"><label class="swap absolute top-2 right-2" data-code="fn get_llm(type: u64) -> LLM {
	if type == 1 { LLM::ChatGPT }
	if type == 2 { LLM::Gemini }
	if type == 3 { LLM::Claude }
	LLM::ChatGPT
}" data-lang="RUST"><input type="checkbox"/> <!> <!></label> <pre class="shiki github-dark-dimmed line-clamp-20 overflow-auto" style="background-color:#22272e;color:#adbac7" tabindex="0"><code><span class="line"><span style="color:#F47067">fn</span><span style="color:#DCBDFB"> get_llm</span><span style="color:#ADBAC7">(</span><span style="color:#F47067">type:</span><span style="color:#F69D50"> u64</span><span style="color:#ADBAC7">) </span><span style="color:#F47067">-></span><span style="color:#6CB6FF"> LLM</span><span style="color:#ADBAC7"> &lbrace;</span></span>
<span class="line"><span style="color:#F47067">	if</span><span style="color:#F47067"> type</span><span style="color:#F47067"> ==</span><span style="color:#6CB6FF"> 1</span><span style="color:#ADBAC7"> &lbrace; </span><span style="color:#6CB6FF">LLM</span><span style="color:#F47067">::</span><span style="color:#F69D50">ChatGPT</span><span style="color:#ADBAC7"> &rbrace;</span></span>
<span class="line"><span style="color:#F47067">	if</span><span style="color:#F47067"> type</span><span style="color:#F47067"> ==</span><span style="color:#6CB6FF"> 2</span><span style="color:#ADBAC7"> &lbrace; </span><span style="color:#6CB6FF">LLM</span><span style="color:#F47067">::</span><span style="color:#F69D50">Gemini</span><span style="color:#ADBAC7"> &rbrace;</span></span>
<span class="line"><span style="color:#F47067">	if</span><span style="color:#F47067"> type</span><span style="color:#F47067"> ==</span><span style="color:#6CB6FF"> 3</span><span style="color:#ADBAC7"> &lbrace; </span><span style="color:#6CB6FF">LLM</span><span style="color:#F47067">::</span><span style="color:#F69D50">Claude</span><span style="color:#ADBAC7"> &rbrace;</span></span>
<span class="line"><span style="color:#6CB6FF">	LLM</span><span style="color:#F47067">::</span><span style="color:#F69D50">ChatGPT</span></span>
<span class="line"><span style="color:#ADBAC7">&rbrace;</span></span></code></pre></figure> <p>Nếu bạn nghĩ đây chính là giải pháp hoàn hảo cho toàn bộ vấn đề thì xin chia buồn, có 1 số hạn chế mà enum đặt ra.</p> <p>Đầu tiên những phần tử con của 1 enum được gọi là <strong>Enum Variant</strong></p> <figure class="highlighted-code relative"><label class="swap absolute top-2 right-2" data-code="// this all LLM's variants
LLM::ChatGPT
LLM::Gemini
LLM::Claude" data-lang="RUST"><input type="checkbox"/> <!> <!></label> <pre class="shiki github-dark-dimmed line-clamp-20 overflow-auto" style="background-color:#22272e;color:#adbac7" tabindex="0"><code><span class="line"><span style="color:#768390">// this all LLM's variants</span></span>
<span class="line"><span style="color:#6CB6FF">LLM</span><span style="color:#F47067">::</span><span style="color:#F69D50">ChatGPT</span></span>
<span class="line"><span style="color:#6CB6FF">LLM</span><span style="color:#F47067">::</span><span style="color:#F69D50">Gemini</span></span>
<span class="line"><span style="color:#6CB6FF">LLM</span><span style="color:#F47067">::</span><span style="color:#F69D50">Claude</span></span></code></pre></figure> <p>Bạn không thể sử dụng <strong>Enum Variant</strong> như 1 ReturnType, Function/Method Params hay Generic Type</p> <figure class="highlighted-code relative"><label class="swap absolute top-2 right-2" data-code="fn get_llm(type: u64) -> LLM::ChatGPT {} // fail
fn send_message_to(gpt: LLM::ChatGPT) {} // fail
let llms: Vec&lt;LLM::ChatGPT> = vec![]; // fail" data-lang="RUST"><input type="checkbox"/> <!> <!></label> <pre class="shiki github-dark-dimmed line-clamp-20 overflow-auto" style="background-color:#22272e;color:#adbac7" tabindex="0"><code><span class="line"><span style="color:#F47067">fn</span><span style="color:#DCBDFB"> get_llm</span><span style="color:#ADBAC7">(</span><span style="color:#F47067">type:</span><span style="color:#F69D50"> u64</span><span style="color:#ADBAC7">) </span><span style="color:#F47067">-></span><span style="color:#6CB6FF"> LLM</span><span style="color:#F47067">::</span><span style="color:#F69D50">ChatGPT</span><span style="color:#ADBAC7"> &lbrace;&rbrace; </span><span style="color:#768390">// fail</span></span>
<span class="line"><span style="color:#F47067">fn</span><span style="color:#DCBDFB"> send_message_to</span><span style="color:#ADBAC7">(gpt</span><span style="color:#F47067">:</span><span style="color:#6CB6FF"> LLM</span><span style="color:#F47067">::</span><span style="color:#F69D50">ChatGPT</span><span style="color:#ADBAC7">) &lbrace;&rbrace; </span><span style="color:#768390">// fail</span></span>
<span class="line"><span style="color:#F47067">let</span><span style="color:#ADBAC7"> llms</span><span style="color:#F47067">:</span><span style="color:#F69D50"> Vec</span><span style="color:#ADBAC7">&#x3C;</span><span style="color:#F69D50">LLM</span><span style="color:#F47067">::</span><span style="color:#F69D50">ChatGPT</span><span style="color:#ADBAC7">> </span><span style="color:#F47067">=</span><span style="color:#DCBDFB"> vec!</span><span style="color:#ADBAC7">[]; </span><span style="color:#768390">// fail</span></span></code></pre></figure> <p>Bạn không thể impl Trait to 1 <strong>Enum Variant</strong></p> <figure class="highlighted-code relative"><label class="swap absolute top-2 right-2" data-code="impl SomeTrait for LLM::ChatGPT {} // fail" data-lang="RUST"><input type="checkbox"/> <!> <!></label> <pre class="shiki github-dark-dimmed line-clamp-20 overflow-auto" style="background-color:#22272e;color:#adbac7" tabindex="0"><code><span class="line"><span style="color:#F47067">impl</span><span style="color:#F69D50"> SomeTrait</span><span style="color:#F47067"> for</span><span style="color:#6CB6FF"> LLM</span><span style="color:#F47067">::</span><span style="color:#F69D50">ChatGPT</span><span style="color:#ADBAC7"> &lbrace;&rbrace; </span><span style="color:#768390">// fail</span></span></code></pre></figure> <p><strong>Enum Variant</strong> dù trong giống 1 struct/tuple nhưng lại không có các khả năng như 1 struct/tuple, ví dụ như sử dụng <code>#[derive]</code> macro</p> <figure class="highlighted-code relative"><label class="swap absolute top-2 right-2" data-code="enum LLM {
	#[derive(Debug)] // fail
	ChatGPT,
	Gemini,
	Claude,
}" data-lang="RUST"><input type="checkbox"/> <!> <!></label> <pre class="shiki github-dark-dimmed line-clamp-20 overflow-auto" style="background-color:#22272e;color:#adbac7" tabindex="0"><code><span class="line"><span style="color:#F47067">enum</span><span style="color:#F69D50"> LLM</span><span style="color:#ADBAC7"> &lbrace;</span></span>
<span class="line"><span style="color:#ADBAC7">	#[derive(</span><span style="color:#F69D50">Debug</span><span style="color:#ADBAC7">)] </span><span style="color:#768390">// fail</span></span>
<span class="line"><span style="color:#F69D50">	ChatGPT</span><span style="color:#ADBAC7">,</span></span>
<span class="line"><span style="color:#F69D50">	Gemini</span><span style="color:#ADBAC7">,</span></span>
<span class="line"><span style="color:#F69D50">	Claude</span><span style="color:#ADBAC7">,</span></span>
<span class="line"><span style="color:#ADBAC7">&rbrace;</span></span></code></pre></figure> <p>Chính vì vậy mà khi cân nhắc giữa việc sử dụng <code>impl</code> và <code>enum</code> bạn cần chắc rằng đã nắm rõ các giới hạn của từng loại.</p> <p>&lbrace;&lbrace;Rust stack allocation vs Java heap allocation&rbrace;&rbrace;</p> <p>Notes:</p> <ul><li>Việc sử dụng enum sẽ giới hạn khả năng của các kiểu dữ liệu bên trong nó</li> <li>Kích thước của Enum được quyết định bằng với size của Variant lớn nhất, điều này dẫn đến việc lãng phí bộ nhớ hơn so với SmartPointer</li></ul> <h2 id="v-kết-luận" class="scroll-mt-20">V. Kết luận</h2><p>Cùng điểm lại những cách mà bạn có thể áp dụng tính polymorphism vào trong 1 project Rust</p> <ul><li>Dynamic Dispatch: Bạn muốn mọi thứ nhanh chóng và không quan trọng performance<ul><li>Smart Pointer: You have a life to live ✅</li> <li>Raw Pointer: You don&#39;t have a life ❌</li> <li>Any: It&#39;s depend</li></ul></li> <li>Static Dispatch: Performance &amp; Typesafe<ul><li>Keyword <code>impl</code>: Everything happen at compiletime 🏎🏎🏎</li> <li>Enum: Slightly footprint, but still fast as f*** 🏎🏎</li></ul></li></ul> <h2 id="advanced-topics" class="scroll-mt-20">Advanced Topics</h2><ol><li>Fat Pointer vs Normal Pointer</li> <li>Allocation in Rust</li> <li>Rust Enum vs Java Enum vs Typescript Enum</li> <li>Rust Trait vs Java Interface</li></ol>`,1);function Ta(Hs){function e(c){const zs=c.parentElement,Da=zs?.getAttribute("data-code")??"";zs?.getAttribute("data-lang"),c.addEventListener("click",va=>{navigator.clipboard.writeText(Da),c.disabled=!0,setTimeout(()=>{c.disabled=!1,c.checked=!1},1e3)})}var G=Ba(),t=s(Ca(G),14),M=a(t),P=a(M);p(P,()=>e);var x=s(P,2);l(x,{class:"swap-on inline-block",icon:"openmoji:check-mark",width:"24",height:"24"});var Ws=s(x,2);l(Ws,{class:"swap-off inline-block",icon:"solar:copy-broken",width:"24",height:"24"}),n(M),o(2),n(t);var r=s(t,11),R=a(r),q=a(R);p(q,()=>e);var V=s(q,2);l(V,{class:"swap-on inline-block",icon:"openmoji:check-mark",width:"24",height:"24"});var Ys=s(V,2);l(Ys,{class:"swap-off inline-block",icon:"solar:copy-broken",width:"24",height:"24"}),n(R),o(2),n(r);var i=s(r,4),j=a(i),S=a(j);p(S,()=>e);var U=s(S,2);l(U,{class:"swap-on inline-block",icon:"openmoji:check-mark",width:"24",height:"24"});var Qs=s(U,2);l(Qs,{class:"swap-off inline-block",icon:"solar:copy-broken",width:"24",height:"24"}),n(j),o(2),n(i);var h=s(i,2),E=a(h),I=a(E);p(I,()=>e);var J=s(I,2);l(J,{class:"swap-on inline-block",icon:"openmoji:check-mark",width:"24",height:"24"});var Xs=s(J,2);l(Xs,{class:"swap-off inline-block",icon:"solar:copy-broken",width:"24",height:"24"}),n(E),o(2),n(h);var y=s(h,25),N=a(y),$=a(N);p($,()=>e);var O=s($,2);l(O,{class:"swap-on inline-block",icon:"openmoji:check-mark",width:"24",height:"24"});var Zs=s(O,2);l(Zs,{class:"swap-off inline-block",icon:"solar:copy-broken",width:"24",height:"24"}),n(N),o(2),n(y);var d=s(y,5),K=a(d),z=a(K);p(z,()=>e);var H=s(z,2);l(H,{class:"swap-on inline-block",icon:"openmoji:check-mark",width:"24",height:"24"});var sa=s(H,2);l(sa,{class:"swap-off inline-block",icon:"solar:copy-broken",width:"24",height:"24"}),n(K),o(2),n(d);var g=s(d,10),W=a(g),Y=a(W);p(Y,()=>e);var Q=s(Y,2);l(Q,{class:"swap-on inline-block",icon:"openmoji:check-mark",width:"24",height:"24"});var aa=s(Q,2);l(aa,{class:"swap-off inline-block",icon:"solar:copy-broken",width:"24",height:"24"}),n(W),o(2),n(g);var u=s(g,5),X=a(u),Z=a(X);p(Z,()=>e);var ss=s(Z,2);l(ss,{class:"swap-on inline-block",icon:"openmoji:check-mark",width:"24",height:"24"});var na=s(ss,2);l(na,{class:"swap-off inline-block",icon:"solar:copy-broken",width:"24",height:"24"}),n(X),o(2),n(u);var m=s(u,6),as=a(m),ns=a(as);p(ns,()=>e);var ls=s(ns,2);l(ls,{class:"swap-on inline-block",icon:"openmoji:check-mark",width:"24",height:"24"});var la=s(ls,2);l(la,{class:"swap-off inline-block",icon:"solar:copy-broken",width:"24",height:"24"}),n(as),o(2),n(m);var b=s(m,4),os=a(b),es=a(os);p(es,()=>e);var ps=s(es,2);l(ps,{class:"swap-on inline-block",icon:"openmoji:check-mark",width:"24",height:"24"});var oa=s(ps,2);l(oa,{class:"swap-off inline-block",icon:"solar:copy-broken",width:"24",height:"24"}),n(os),o(2),n(b);var D=s(b,9),cs=a(D),ts=a(cs);p(ts,()=>e);var rs=s(ts,2);l(rs,{class:"swap-on inline-block",icon:"openmoji:check-mark",width:"24",height:"24"});var ea=s(rs,2);l(ea,{class:"swap-off inline-block",icon:"solar:copy-broken",width:"24",height:"24"}),n(cs),o(2),n(D);var F=s(D,4),is=a(F),hs=a(is);p(hs,()=>e);var ys=s(hs,2);l(ys,{class:"swap-on inline-block",icon:"openmoji:check-mark",width:"24",height:"24"});var pa=s(ys,2);l(pa,{class:"swap-off inline-block",icon:"solar:copy-broken",width:"24",height:"24"}),n(is),o(2),n(F);var C=s(F,4),ds=a(C),gs=a(ds);p(gs,()=>e);var us=s(gs,2);l(us,{class:"swap-on inline-block",icon:"openmoji:check-mark",width:"24",height:"24"});var ca=s(us,2);l(ca,{class:"swap-off inline-block",icon:"solar:copy-broken",width:"24",height:"24"}),n(ds),o(2),n(C);var A=s(C,5),ms=a(A),bs=a(ms);p(bs,()=>e);var Ds=s(bs,2);l(Ds,{class:"swap-on inline-block",icon:"openmoji:check-mark",width:"24",height:"24"});var ta=s(Ds,2);l(ta,{class:"swap-off inline-block",icon:"solar:copy-broken",width:"24",height:"24"}),n(ms),o(2),n(A);var B=s(A,2),Fs=a(B),Cs=a(Fs);p(Cs,()=>e);var As=s(Cs,2);l(As,{class:"swap-on inline-block",icon:"openmoji:check-mark",width:"24",height:"24"});var ra=s(As,2);l(ra,{class:"swap-off inline-block",icon:"solar:copy-broken",width:"24",height:"24"}),n(Fs),o(2),n(B);var v=s(B,4),Bs=a(v),vs=a(Bs);p(vs,()=>e);var ks=s(vs,2);l(ks,{class:"swap-on inline-block",icon:"openmoji:check-mark",width:"24",height:"24"});var ia=s(ks,2);l(ia,{class:"swap-off inline-block",icon:"solar:copy-broken",width:"24",height:"24"}),n(Bs),o(2),n(v);var k=s(v,6),fs=a(k),_s=a(fs);p(_s,()=>e);var Ls=s(_s,2);l(Ls,{class:"swap-on inline-block",icon:"openmoji:check-mark",width:"24",height:"24"});var ha=s(Ls,2);l(ha,{class:"swap-off inline-block",icon:"solar:copy-broken",width:"24",height:"24"}),n(fs),o(2),n(k);var f=s(k,9),ws=a(f),Ts=a(ws);p(Ts,()=>e);var Gs=s(Ts,2);l(Gs,{class:"swap-on inline-block",icon:"openmoji:check-mark",width:"24",height:"24"});var ya=s(Gs,2);l(ya,{class:"swap-off inline-block",icon:"solar:copy-broken",width:"24",height:"24"}),n(ws),o(2),n(f);var _=s(f,4),Ms=a(_),Ps=a(Ms);p(Ps,()=>e);var xs=s(Ps,2);l(xs,{class:"swap-on inline-block",icon:"openmoji:check-mark",width:"24",height:"24"});var da=s(xs,2);l(da,{class:"swap-off inline-block",icon:"solar:copy-broken",width:"24",height:"24"}),n(Ms),o(2),n(_);var L=s(_,6),Rs=a(L),qs=a(Rs);p(qs,()=>e);var Vs=s(qs,2);l(Vs,{class:"swap-on inline-block",icon:"openmoji:check-mark",width:"24",height:"24"});var ga=s(Vs,2);l(ga,{class:"swap-off inline-block",icon:"solar:copy-broken",width:"24",height:"24"}),n(Rs),o(2),n(L);var w=s(L,4),js=a(w),Ss=a(js);p(Ss,()=>e);var Us=s(Ss,2);l(Us,{class:"swap-on inline-block",icon:"openmoji:check-mark",width:"24",height:"24"});var ua=s(Us,2);l(ua,{class:"swap-off inline-block",icon:"solar:copy-broken",width:"24",height:"24"}),n(js),o(2),n(w);var T=s(w,4),Es=a(T),Is=a(Es);p(Is,()=>e);var Js=s(Is,2);l(Js,{class:"swap-on inline-block",icon:"openmoji:check-mark",width:"24",height:"24"});var ma=s(Js,2);l(ma,{class:"swap-off inline-block",icon:"solar:copy-broken",width:"24",height:"24"}),n(Es),o(2),n(T);var Ns=s(T,4),$s=a(Ns),Os=a($s);p(Os,()=>e);var Ks=s(Os,2);l(Ks,{class:"swap-on inline-block",icon:"openmoji:check-mark",width:"24",height:"24"});var ba=s(Ks,2);l(ba,{class:"swap-off inline-block",icon:"solar:copy-broken",width:"24",height:"24"}),n($s),o(2),n(Ns),o(16),Aa(Hs,G)}export{Ta as default};
